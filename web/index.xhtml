<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
      xmlns:p="http://primefaces.org/ui">

<h:head>

</h:head>
<h:body>
    <c:set var="minhaVariavel" value="#{1}"/>
    <c:set var="minhaLista" value="#{[1,2,3,4,5]}"/>

    <p:importEnum type="br.com.devdojo.maratonajsf.model.enums.Turno"
                  var="Turno"
                  allSuffix="ALL_ENUM_VALUES"/>

    <h:outputLabel value="Hello, world"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.nome}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante['nome']}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.sobrenome}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean['estudante']['sobrenome']}"/><br/>

    <h:outputLabel
            value="#{estudanteRegistrarBean.estudante.nota1 eq estudanteRegistrarBean.estudante.nota2}"/><br/>
    <h:outputLabel
            value="#{estudanteRegistrarBean.estudante.nota1 == estudanteRegistrarBean.estudante.nota2}"/><br/>
    <h:outputLabel
            value="#{estudanteRegistrarBean.estudante.nota1 eq estudanteRegistrarBean.estudante.nota2 &amp;&amp; estudanteRegistrarBean.estudante.nome.equals('Arthur')}"/><br/>
    <h:outputLabel
            value="#{estudanteRegistrarBean.estudante.nota1 eq estudanteRegistrarBean.estudante.nota2 and estudanteRegistrarBean.estudante.nome.equals('Arthur')}"/><br/>

    <h:outputText value="Comparação de notas (menor ou igual): "/>
    <h:outputLabel
            value="#{estudanteRegistrarBean.estudante.nota1 le estudanteRegistrarBean.estudante.nota2}"/><br/>
    <h:outputLabel value="Comparação de notas (menor que): "/>
    <h:outputLabel
            value="#{estudanteRegistrarBean.estudante.nota1 lt estudanteRegistrarBean.estudante.nota2}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.nota1 eq 0 ? 'ZERO' : 'NAO EH ZERO'}"/><br/>
    <h:outputLabel value="Aqui sera um exemplo de que nao funciona atribuicao de forma direta:"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.nota1 = 10}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.nota1}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.nome += ' nome extra'}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.nome}"/><br/>

    <h:outputText value="Mostrando enum de estudante:"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.turno}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.turno eq Turno.MATUTINO}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.turno.equals(Turno.MATUTINO)}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.estudante.turno eq Turno.VESPERTINO}"/><br/>

    <!-- Palavras reservadas: and (&&), or (||), not (!), eq (==), ne (!=), lt (<), le (<=), gt (>), ge (>=), true, false, null, instanceof, empty, div, mod -->
    <!-- Para comentarios nao aparecerem no inspecionamento da pagina (quando se clica em F12 pra ver o codigo na pagina pronta),
    devemos colocar uma configuracao dentro do web.xml (ver o que foi feito em web.xml, em context-param).
    Obs: O servidor precisa ser reiniciado para que essa alteracao tenha efeito -->

    <!-- Arrays -->
    <h:outputLabel
            value="#{estudanteRegistrarBean.nomesArray[0]} #{estudanteRegistrarBean.nomesArray[1]} #{estudanteRegistrarBean.nomesArray[2]}"/><br/>
    <!-- ui: repeat array -->
    <ui:repeat value="#{estudanteRegistrarBean.nomesArray}" var="nomeDaVariavel">
        <h:outputLabel value="#{nomeDaVariavel}"/><br/>
    </ui:repeat>

    <!-- List -->
    <!-- forma nao recomendada -->
    <h:outputLabel
            value="#{estudanteRegistrarBean.nomesList[0]} #{estudanteRegistrarBean.nomesList[1]} #{estudanteRegistrarBean.nomesList[2]}"/><br/>
    <!-- forma recomendada -->
    <h:outputLabel
            value="#{estudanteRegistrarBean.nomesList.get(0)} #{estudanteRegistrarBean.nomesList.get(1)} #{estudanteRegistrarBean.nomesList.get(2)}"/><br/>
    <!-- ui: repeat list -->
    <ui:repeat value="#{estudanteRegistrarBean.nomesList}" var="nome">
        <h:outputLabel value="#{nome}"/><br/>
    </ui:repeat>

    <!-- Set -->
    <!-- ui: repeat set -->
    <h:outputLabel value="------------ Set -------------"/><br/>
    <!-- a partir do JSF 2.3 essa forma funciona, mas antes ele so fazia um toString() dos valores -->
    <ui:repeat value="#{estudanteRegistrarBean.nomesSet}" var="nome">
        <h:outputLabel value="#{nome}"/><br/>
    </ui:repeat>
    <!-- ate a versao JSF 2.2 era essa a forma pra ele pegar corretamente valor por valor -->
    <ui:repeat value="#{estudanteRegistrarBean.nomesSet.toArray()}" var="nome">
        <h:outputLabel value="#{nome}"/><br/>
    </ui:repeat>

    <!-- Map -->
    <h:outputLabel value="----------- Map ---------------"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.nomesMap.get('Primeiro')}"/><br/>
    <h:outputLabel value="#{estudanteRegistrarBean.nomesMap}"/><br/>
    <!-- ui: repeat map -->
    <!-- a partir da versao 2.3 -->
    <ui:repeat value="#{estudanteRegistrarBean.nomesMap.entrySet()}" var="entry">
        <h:outputLabel value="#{entry.key} - #{entry.value}"/><br/>
    </ui:repeat>
    <!-- ate a versao 2.2 -->
    <ui:repeat value="#{estudanteRegistrarBean.nomesMap.entrySet().toArray()}" var="entry">
        <h:outputLabel value="#{entry.key} - #{entry.value}"/><br/>
    </ui:repeat>

    <!-- Chamada de metodo -->
    #{estudanteRegistrarBean.executar()}
    #{estudanteRegistrarBean.executar('ihuu')}
    #{estudanteRegistrarBean.executar("ihuuoow")}
    #{estudanteRegistrarBean.executar(estudanteRegistrarBean.estudante.nome)}
    #{estudanteRegistrarBean.executarRetorno(estudanteRegistrarBean.estudante.nome)}
    #{estudanteRegistrarBean.executarRetorno('Goku')}<br/>
    <h:commandButton value="Esse botao vai conseguir ir para canto nenhum"
                     action="#{estudanteRegistrarBean.irParaIndex2()}"/>
    <h:commandButton value="Esse botao tambem nao vai conseguir ir para canto nenhum" action="index2"/><br/>
    <h:form>
        <h:commandButton value="Esse botao vai conseguir ir para index2"
                         action="#{estudanteRegistrarBean.irParaIndex2()}"/>
        <h:commandButton value="Esse botao tambem vai conseguir ir para index2" action="index2"/><br/>

        <!-- passando valores com EL para funcoes JS -->
        <h:commandButton value="Soltar magia" onclick="fazMagica('boom!')"/><br/>
        <h:commandButton value="Alert Nome" onclick="alertNome('#{estudanteRegistrarBean.estudante.nome}')"/>
    </h:form>

    <!-- Imprimindo CSS com Expression Language (esse ultimo eh o que tenho usado ate agora) -->
    <ui:repeat value="#{estudanteRegistrarBean.nomesList}" var="nome" varStatus="status">
        <h:outputLabel value="#{nome}" style="color: #{status.index mod 2 == 0 ? 'red' : 'green'}"/><br/>
    </ui:repeat>
    <br/>

    <h:form id="form">
        <!-- Botoes usando AJAX -->
        <h:commandButton value="Exibir notas">
            <f:ajax listener="#{estudanteRegistrarBean.exibirNotas()}" render="notasGrid"/>
        </h:commandButton>
        <h:commandButton value="Esconder notas">
            <f:ajax render="notasGrid" listener="#{estudanteRegistrarBean.esconderNotas()}"/>
        </h:commandButton>

        <!-- A parte que o AJAX ira requisitar (preciso dizer isso no "render" dele) -->
        <h:panelGrid id="notasGrid">
            <h:outputText value="#{estudanteRegistrarBean.estudante.nome}"/>
            <h:outputText value="#{estudanteRegistrarBean.estudante.sobrenome}"/>
            <h:outputText value="#{estudanteRegistrarBean.estudante.turno}"/>
            <h:outputText value="#{estudanteRegistrarBean.estudante.nota1}"
                          rendered="#{estudanteRegistrarBean.mostrarNotas}"/>
            <h:outputText value="#{estudanteRegistrarBean.estudante.nota2}"
                          rendered="#{estudanteRegistrarBean.mostrarNotas}"/>
            <h:outputText value="#{estudanteRegistrarBean.estudante.nota3}"
                          rendered="#{estudanteRegistrarBean.mostrarNotas}"/>
        </h:panelGrid>

        <h:commandButton value="Exibir link">
            <f:ajax listener="#{estudanteRegistrarBean.exibirLink()}" render="pgLink"/>
        </h:commandButton>
        <h:commandButton value="Esconder link">
            <f:ajax listener="#{estudanteRegistrarBean.esconderLink()}" render="pgLink"/>
        </h:commandButton>
        <h:panelGroup id="pgLink">
            <ui:fragment id="fragmentLink" rendered="#{estudanteRegistrarBean.mostrarLink}">
                <a href="www.google.com.br" target="_blank">www.google.com.br</a>
            </ui:fragment>
        </h:panelGroup>
    </h:form>

    <!--Lambdas-->
    #{(soma -> soma + num)(10)}<br/>
    #{((v1, v2, v3) -> v1 * v2 * v3)(2, 2, 2)}<br/>
    #{(x -> x * x * x)(2)}<br/>
    #{cubo = (x -> x* x * x); cubo(2)}<br/> <!--Aqui eh a forma que o lambda foi pensado para ser usado no EL-->
    <!--#{cubo = (x -> x * x * x)}<br/>-->
    <!--#{cubo(10)}-->
    <h:form>
        <h:commandButton value="Calcular cubo"
                         actionListener="#{estudanteRegistrarBean.calcularCubo((x -> x*x*x), 2)}"/>
    </h:form>

    <!--Lists-->
    <ui:repeat value="#{['Primeiro', 'Segundo', 'Terceiro']}" var="list">
        #{list}
    </ui:repeat>
    <br/>
    <!--Set-->
    <ui:repeat value="#{{'Primeiro', 'Segundo', 'Terceiro', 'Primeiro'}}" var="set">
        #{set}
    </ui:repeat>
    <br/>
    <!--Map-->
    <ui:repeat value="#{{'Chave 1':'Valor 1','Chave 2':'Valor 2'}}" var="map">
        #{map}
        <!--Abaixo eu nao sei porque nao esta pegando-->
        <!--<ui:repeat value="#{map.entrySet().toArray()}" var="entry">-->
        <!--#{entry.key} - #{entry.set}-->
        <!--</ui:repeat>-->
    </ui:repeat>
    <br/>
    <!--Stream-->
    <ui:repeat value="#{[1,2,3,4,5,6,7,8,9,10].stream().filter(v -> v>5).toList()}" var="result">
        #{result}
    </ui:repeat>
    <br/>

    <!--Alguns exemplos usando uma variavel que criei la em cima-->
    <ui:repeat value="#{minhaLista.stream().filter(v -> v>2).toList()}" var="result">
        #{result}
    </ui:repeat>
    <br/>
    #{minhaLista.stream().average().get()}<br/> <!--Aqui to tirando a media dessa lista que criei-->
    #{minhaLista.stream().sum()}<br/> <!--Aqui to fazendo a soma dessa lista-->
    #{minhaLista.stream().filter(v -> v>2).sum()}<br/> <!--Aqui to fazendo a soma dessa lista, mas so com os valores que passaram no filtro-->
</h:body>

<script type="text/javascript">
    function fazMagica(magica) {
        alert(magica);
    }

    function alertNome(nome) {
        alert(nome);
    }
</script>

</html>
